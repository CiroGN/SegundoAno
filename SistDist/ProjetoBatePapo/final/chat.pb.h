// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto;
class BCC_Dist_toClient;
class BCC_Dist_toClientDefaultTypeInternal;
extern BCC_Dist_toClientDefaultTypeInternal _BCC_Dist_toClient_default_instance_;
class BCC_Dist_toServer;
class BCC_Dist_toServerDefaultTypeInternal;
extern BCC_Dist_toServerDefaultTypeInternal _BCC_Dist_toServer_default_instance_;
class BCC_formatMessage;
class BCC_formatMessageDefaultTypeInternal;
extern BCC_formatMessageDefaultTypeInternal _BCC_formatMessage_default_instance_;
class BCC_memoriaServer;
class BCC_memoriaServerDefaultTypeInternal;
extern BCC_memoriaServerDefaultTypeInternal _BCC_memoriaServer_default_instance_;
class BCC_serToServ;
class BCC_serToServDefaultTypeInternal;
extern BCC_serToServDefaultTypeInternal _BCC_serToServ_default_instance_;
class BCC_users;
class BCC_usersDefaultTypeInternal;
extern BCC_usersDefaultTypeInternal _BCC_users_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BCC_Dist_toClient* Arena::CreateMaybeMessage<::BCC_Dist_toClient>(Arena*);
template<> ::BCC_Dist_toServer* Arena::CreateMaybeMessage<::BCC_Dist_toServer>(Arena*);
template<> ::BCC_formatMessage* Arena::CreateMaybeMessage<::BCC_formatMessage>(Arena*);
template<> ::BCC_memoriaServer* Arena::CreateMaybeMessage<::BCC_memoriaServer>(Arena*);
template<> ::BCC_serToServ* Arena::CreateMaybeMessage<::BCC_serToServ>(Arena*);
template<> ::BCC_users* Arena::CreateMaybeMessage<::BCC_users>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum BCC_Dist_toServer_CommandTypetoServer : int {
  BCC_Dist_toServer_CommandTypetoServer_CMD_ID = 0,
  BCC_Dist_toServer_CommandTypetoServer_CMD_LIST = 1,
  BCC_Dist_toServer_CommandTypetoServer_CMD_SENDALL = 2,
  BCC_Dist_toServer_CommandTypetoServer_CMD_SENDONE = 3,
  BCC_Dist_toServer_CommandTypetoServer_CMD_SENDLIST = 4,
  BCC_Dist_toServer_CommandTypetoServer_CMD_DC = 5,
  BCC_Dist_toServer_CommandTypetoServer_BCC_Dist_toServer_CommandTypetoServer_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BCC_Dist_toServer_CommandTypetoServer_BCC_Dist_toServer_CommandTypetoServer_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BCC_Dist_toServer_CommandTypetoServer_IsValid(int value);
constexpr BCC_Dist_toServer_CommandTypetoServer BCC_Dist_toServer_CommandTypetoServer_CommandTypetoServer_MIN = BCC_Dist_toServer_CommandTypetoServer_CMD_ID;
constexpr BCC_Dist_toServer_CommandTypetoServer BCC_Dist_toServer_CommandTypetoServer_CommandTypetoServer_MAX = BCC_Dist_toServer_CommandTypetoServer_CMD_DC;
constexpr int BCC_Dist_toServer_CommandTypetoServer_CommandTypetoServer_ARRAYSIZE = BCC_Dist_toServer_CommandTypetoServer_CommandTypetoServer_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BCC_Dist_toServer_CommandTypetoServer_descriptor();
template<typename T>
inline const std::string& BCC_Dist_toServer_CommandTypetoServer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BCC_Dist_toServer_CommandTypetoServer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BCC_Dist_toServer_CommandTypetoServer_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BCC_Dist_toServer_CommandTypetoServer_descriptor(), enum_t_value);
}
inline bool BCC_Dist_toServer_CommandTypetoServer_Parse(
    const std::string& name, BCC_Dist_toServer_CommandTypetoServer* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BCC_Dist_toServer_CommandTypetoServer>(
    BCC_Dist_toServer_CommandTypetoServer_descriptor(), name, value);
}
enum BCC_Dist_toClient_CommandTypetoClient : int {
  BCC_Dist_toClient_CommandTypetoClient_CMD_LIST = 0,
  BCC_Dist_toClient_CommandTypetoClient_CMD_MSG = 1,
  BCC_Dist_toClient_CommandTypetoClient_CMD_ERROR = 2,
  BCC_Dist_toClient_CommandTypetoClient_BCC_Dist_toClient_CommandTypetoClient_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BCC_Dist_toClient_CommandTypetoClient_BCC_Dist_toClient_CommandTypetoClient_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BCC_Dist_toClient_CommandTypetoClient_IsValid(int value);
constexpr BCC_Dist_toClient_CommandTypetoClient BCC_Dist_toClient_CommandTypetoClient_CommandTypetoClient_MIN = BCC_Dist_toClient_CommandTypetoClient_CMD_LIST;
constexpr BCC_Dist_toClient_CommandTypetoClient BCC_Dist_toClient_CommandTypetoClient_CommandTypetoClient_MAX = BCC_Dist_toClient_CommandTypetoClient_CMD_ERROR;
constexpr int BCC_Dist_toClient_CommandTypetoClient_CommandTypetoClient_ARRAYSIZE = BCC_Dist_toClient_CommandTypetoClient_CommandTypetoClient_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BCC_Dist_toClient_CommandTypetoClient_descriptor();
template<typename T>
inline const std::string& BCC_Dist_toClient_CommandTypetoClient_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BCC_Dist_toClient_CommandTypetoClient>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BCC_Dist_toClient_CommandTypetoClient_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BCC_Dist_toClient_CommandTypetoClient_descriptor(), enum_t_value);
}
inline bool BCC_Dist_toClient_CommandTypetoClient_Parse(
    const std::string& name, BCC_Dist_toClient_CommandTypetoClient* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BCC_Dist_toClient_CommandTypetoClient>(
    BCC_Dist_toClient_CommandTypetoClient_descriptor(), name, value);
}
enum BCC_serToServ_CommandTypetoServerToServer : int {
  BCC_serToServ_CommandTypetoServerToServer_CMD_LIST = 0,
  BCC_serToServ_CommandTypetoServerToServer_CMD_MSG = 1,
  BCC_serToServ_CommandTypetoServerToServer_BCC_serToServ_CommandTypetoServerToServer_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BCC_serToServ_CommandTypetoServerToServer_BCC_serToServ_CommandTypetoServerToServer_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BCC_serToServ_CommandTypetoServerToServer_IsValid(int value);
constexpr BCC_serToServ_CommandTypetoServerToServer BCC_serToServ_CommandTypetoServerToServer_CommandTypetoServerToServer_MIN = BCC_serToServ_CommandTypetoServerToServer_CMD_LIST;
constexpr BCC_serToServ_CommandTypetoServerToServer BCC_serToServ_CommandTypetoServerToServer_CommandTypetoServerToServer_MAX = BCC_serToServ_CommandTypetoServerToServer_CMD_MSG;
constexpr int BCC_serToServ_CommandTypetoServerToServer_CommandTypetoServerToServer_ARRAYSIZE = BCC_serToServ_CommandTypetoServerToServer_CommandTypetoServerToServer_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BCC_serToServ_CommandTypetoServerToServer_descriptor();
template<typename T>
inline const std::string& BCC_serToServ_CommandTypetoServerToServer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BCC_serToServ_CommandTypetoServerToServer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BCC_serToServ_CommandTypetoServerToServer_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BCC_serToServ_CommandTypetoServerToServer_descriptor(), enum_t_value);
}
inline bool BCC_serToServ_CommandTypetoServerToServer_Parse(
    const std::string& name, BCC_serToServ_CommandTypetoServerToServer* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BCC_serToServ_CommandTypetoServerToServer>(
    BCC_serToServ_CommandTypetoServerToServer_descriptor(), name, value);
}
// ===================================================================

class BCC_Dist_toServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BCC_Dist_toServer) */ {
 public:
  inline BCC_Dist_toServer() : BCC_Dist_toServer(nullptr) {};
  virtual ~BCC_Dist_toServer();

  BCC_Dist_toServer(const BCC_Dist_toServer& from);
  BCC_Dist_toServer(BCC_Dist_toServer&& from) noexcept
    : BCC_Dist_toServer() {
    *this = ::std::move(from);
  }

  inline BCC_Dist_toServer& operator=(const BCC_Dist_toServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline BCC_Dist_toServer& operator=(BCC_Dist_toServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BCC_Dist_toServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BCC_Dist_toServer* internal_default_instance() {
    return reinterpret_cast<const BCC_Dist_toServer*>(
               &_BCC_Dist_toServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BCC_Dist_toServer& a, BCC_Dist_toServer& b) {
    a.Swap(&b);
  }
  inline void Swap(BCC_Dist_toServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BCC_Dist_toServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BCC_Dist_toServer* New() const final {
    return CreateMaybeMessage<BCC_Dist_toServer>(nullptr);
  }

  BCC_Dist_toServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BCC_Dist_toServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BCC_Dist_toServer& from);
  void MergeFrom(const BCC_Dist_toServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BCC_Dist_toServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BCC_Dist_toServer";
  }
  protected:
  explicit BCC_Dist_toServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BCC_Dist_toServer_CommandTypetoServer CommandTypetoServer;
  static constexpr CommandTypetoServer CMD_ID =
    BCC_Dist_toServer_CommandTypetoServer_CMD_ID;
  static constexpr CommandTypetoServer CMD_LIST =
    BCC_Dist_toServer_CommandTypetoServer_CMD_LIST;
  static constexpr CommandTypetoServer CMD_SENDALL =
    BCC_Dist_toServer_CommandTypetoServer_CMD_SENDALL;
  static constexpr CommandTypetoServer CMD_SENDONE =
    BCC_Dist_toServer_CommandTypetoServer_CMD_SENDONE;
  static constexpr CommandTypetoServer CMD_SENDLIST =
    BCC_Dist_toServer_CommandTypetoServer_CMD_SENDLIST;
  static constexpr CommandTypetoServer CMD_DC =
    BCC_Dist_toServer_CommandTypetoServer_CMD_DC;
  static inline bool CommandTypetoServer_IsValid(int value) {
    return BCC_Dist_toServer_CommandTypetoServer_IsValid(value);
  }
  static constexpr CommandTypetoServer CommandTypetoServer_MIN =
    BCC_Dist_toServer_CommandTypetoServer_CommandTypetoServer_MIN;
  static constexpr CommandTypetoServer CommandTypetoServer_MAX =
    BCC_Dist_toServer_CommandTypetoServer_CommandTypetoServer_MAX;
  static constexpr int CommandTypetoServer_ARRAYSIZE =
    BCC_Dist_toServer_CommandTypetoServer_CommandTypetoServer_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandTypetoServer_descriptor() {
    return BCC_Dist_toServer_CommandTypetoServer_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandTypetoServer_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandTypetoServer>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandTypetoServer_Name.");
    return BCC_Dist_toServer_CommandTypetoServer_Name(enum_t_value);
  }
  static inline bool CommandTypetoServer_Parse(const std::string& name,
      CommandTypetoServer* value) {
    return BCC_Dist_toServer_CommandTypetoServer_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReceiversFieldNumber = 3,
    kMynameFieldNumber = 2,
    kMessageFieldNumber = 4,
    kCommandFieldNumber = 1,
  };
  // repeated .BCC_users receivers = 3;
  int receivers_size() const;
  private:
  int _internal_receivers_size() const;
  public:
  void clear_receivers();
  ::BCC_users* mutable_receivers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >*
      mutable_receivers();
  private:
  const ::BCC_users& _internal_receivers(int index) const;
  ::BCC_users* _internal_add_receivers();
  public:
  const ::BCC_users& receivers(int index) const;
  ::BCC_users* add_receivers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >&
      receivers() const;

  // string myname = 2;
  void clear_myname();
  const std::string& myname() const;
  void set_myname(const std::string& value);
  void set_myname(std::string&& value);
  void set_myname(const char* value);
  void set_myname(const char* value, size_t size);
  std::string* mutable_myname();
  std::string* release_myname();
  void set_allocated_myname(std::string* myname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_myname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_myname(
      std::string* myname);
  private:
  const std::string& _internal_myname() const;
  void _internal_set_myname(const std::string& value);
  std::string* _internal_mutable_myname();
  public:

  // string message = 4;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .BCC_Dist_toServer.CommandTypetoServer command = 1;
  void clear_command();
  ::BCC_Dist_toServer_CommandTypetoServer command() const;
  void set_command(::BCC_Dist_toServer_CommandTypetoServer value);
  private:
  ::BCC_Dist_toServer_CommandTypetoServer _internal_command() const;
  void _internal_set_command(::BCC_Dist_toServer_CommandTypetoServer value);
  public:

  // @@protoc_insertion_point(class_scope:BCC_Dist_toServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users > receivers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr myname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class BCC_Dist_toClient PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BCC_Dist_toClient) */ {
 public:
  inline BCC_Dist_toClient() : BCC_Dist_toClient(nullptr) {};
  virtual ~BCC_Dist_toClient();

  BCC_Dist_toClient(const BCC_Dist_toClient& from);
  BCC_Dist_toClient(BCC_Dist_toClient&& from) noexcept
    : BCC_Dist_toClient() {
    *this = ::std::move(from);
  }

  inline BCC_Dist_toClient& operator=(const BCC_Dist_toClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline BCC_Dist_toClient& operator=(BCC_Dist_toClient&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BCC_Dist_toClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BCC_Dist_toClient* internal_default_instance() {
    return reinterpret_cast<const BCC_Dist_toClient*>(
               &_BCC_Dist_toClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BCC_Dist_toClient& a, BCC_Dist_toClient& b) {
    a.Swap(&b);
  }
  inline void Swap(BCC_Dist_toClient* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BCC_Dist_toClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BCC_Dist_toClient* New() const final {
    return CreateMaybeMessage<BCC_Dist_toClient>(nullptr);
  }

  BCC_Dist_toClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BCC_Dist_toClient>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BCC_Dist_toClient& from);
  void MergeFrom(const BCC_Dist_toClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BCC_Dist_toClient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BCC_Dist_toClient";
  }
  protected:
  explicit BCC_Dist_toClient(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BCC_Dist_toClient_CommandTypetoClient CommandTypetoClient;
  static constexpr CommandTypetoClient CMD_LIST =
    BCC_Dist_toClient_CommandTypetoClient_CMD_LIST;
  static constexpr CommandTypetoClient CMD_MSG =
    BCC_Dist_toClient_CommandTypetoClient_CMD_MSG;
  static constexpr CommandTypetoClient CMD_ERROR =
    BCC_Dist_toClient_CommandTypetoClient_CMD_ERROR;
  static inline bool CommandTypetoClient_IsValid(int value) {
    return BCC_Dist_toClient_CommandTypetoClient_IsValid(value);
  }
  static constexpr CommandTypetoClient CommandTypetoClient_MIN =
    BCC_Dist_toClient_CommandTypetoClient_CommandTypetoClient_MIN;
  static constexpr CommandTypetoClient CommandTypetoClient_MAX =
    BCC_Dist_toClient_CommandTypetoClient_CommandTypetoClient_MAX;
  static constexpr int CommandTypetoClient_ARRAYSIZE =
    BCC_Dist_toClient_CommandTypetoClient_CommandTypetoClient_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandTypetoClient_descriptor() {
    return BCC_Dist_toClient_CommandTypetoClient_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandTypetoClient_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandTypetoClient>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandTypetoClient_Name.");
    return BCC_Dist_toClient_CommandTypetoClient_Name(enum_t_value);
  }
  static inline bool CommandTypetoClient_Parse(const std::string& name,
      CommandTypetoClient* value) {
    return BCC_Dist_toClient_CommandTypetoClient_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 3,
    kErrorMessageFieldNumber = 4,
    kMessageFieldNumber = 2,
    kCommandFieldNumber = 1,
  };
  // repeated .BCC_users users = 3;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::BCC_users* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >*
      mutable_users();
  private:
  const ::BCC_users& _internal_users(int index) const;
  ::BCC_users* _internal_add_users();
  public:
  const ::BCC_users& users(int index) const;
  ::BCC_users* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >&
      users() const;

  // string error_message = 4;
  void clear_error_message();
  const std::string& error_message() const;
  void set_error_message(const std::string& value);
  void set_error_message(std::string&& value);
  void set_error_message(const char* value);
  void set_error_message(const char* value, size_t size);
  std::string* mutable_error_message();
  std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_error_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_error_message(
      std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // .BCC_formatMessage message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::BCC_formatMessage& message() const;
  ::BCC_formatMessage* release_message();
  ::BCC_formatMessage* mutable_message();
  void set_allocated_message(::BCC_formatMessage* message);
  private:
  const ::BCC_formatMessage& _internal_message() const;
  ::BCC_formatMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::BCC_formatMessage* message);
  ::BCC_formatMessage* unsafe_arena_release_message();

  // .BCC_Dist_toClient.CommandTypetoClient command = 1;
  void clear_command();
  ::BCC_Dist_toClient_CommandTypetoClient command() const;
  void set_command(::BCC_Dist_toClient_CommandTypetoClient value);
  private:
  ::BCC_Dist_toClient_CommandTypetoClient _internal_command() const;
  void _internal_set_command(::BCC_Dist_toClient_CommandTypetoClient value);
  public:

  // @@protoc_insertion_point(class_scope:BCC_Dist_toClient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users > users_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  ::BCC_formatMessage* message_;
  int command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class BCC_users PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BCC_users) */ {
 public:
  inline BCC_users() : BCC_users(nullptr) {};
  virtual ~BCC_users();

  BCC_users(const BCC_users& from);
  BCC_users(BCC_users&& from) noexcept
    : BCC_users() {
    *this = ::std::move(from);
  }

  inline BCC_users& operator=(const BCC_users& from) {
    CopyFrom(from);
    return *this;
  }
  inline BCC_users& operator=(BCC_users&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BCC_users& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BCC_users* internal_default_instance() {
    return reinterpret_cast<const BCC_users*>(
               &_BCC_users_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BCC_users& a, BCC_users& b) {
    a.Swap(&b);
  }
  inline void Swap(BCC_users* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BCC_users* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BCC_users* New() const final {
    return CreateMaybeMessage<BCC_users>(nullptr);
  }

  BCC_users* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BCC_users>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BCC_users& from);
  void MergeFrom(const BCC_users& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BCC_users* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BCC_users";
  }
  protected:
  explicit BCC_users(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIpFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:BCC_users)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class BCC_formatMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BCC_formatMessage) */ {
 public:
  inline BCC_formatMessage() : BCC_formatMessage(nullptr) {};
  virtual ~BCC_formatMessage();

  BCC_formatMessage(const BCC_formatMessage& from);
  BCC_formatMessage(BCC_formatMessage&& from) noexcept
    : BCC_formatMessage() {
    *this = ::std::move(from);
  }

  inline BCC_formatMessage& operator=(const BCC_formatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BCC_formatMessage& operator=(BCC_formatMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BCC_formatMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BCC_formatMessage* internal_default_instance() {
    return reinterpret_cast<const BCC_formatMessage*>(
               &_BCC_formatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BCC_formatMessage& a, BCC_formatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BCC_formatMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BCC_formatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BCC_formatMessage* New() const final {
    return CreateMaybeMessage<BCC_formatMessage>(nullptr);
  }

  BCC_formatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BCC_formatMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BCC_formatMessage& from);
  void MergeFrom(const BCC_formatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BCC_formatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BCC_formatMessage";
  }
  protected:
  explicit BCC_formatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiverFieldNumber = 1,
    kMessageFieldNumber = 2,
    kSourceFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // string receiver = 1;
  void clear_receiver();
  const std::string& receiver() const;
  void set_receiver(const std::string& value);
  void set_receiver(std::string&& value);
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  std::string* mutable_receiver();
  std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_receiver();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_receiver(
      std::string* receiver);
  private:
  const std::string& _internal_receiver() const;
  void _internal_set_receiver(const std::string& value);
  std::string* _internal_mutable_receiver();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string source = 3;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:BCC_formatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class BCC_serToServ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BCC_serToServ) */ {
 public:
  inline BCC_serToServ() : BCC_serToServ(nullptr) {};
  virtual ~BCC_serToServ();

  BCC_serToServ(const BCC_serToServ& from);
  BCC_serToServ(BCC_serToServ&& from) noexcept
    : BCC_serToServ() {
    *this = ::std::move(from);
  }

  inline BCC_serToServ& operator=(const BCC_serToServ& from) {
    CopyFrom(from);
    return *this;
  }
  inline BCC_serToServ& operator=(BCC_serToServ&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BCC_serToServ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BCC_serToServ* internal_default_instance() {
    return reinterpret_cast<const BCC_serToServ*>(
               &_BCC_serToServ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BCC_serToServ& a, BCC_serToServ& b) {
    a.Swap(&b);
  }
  inline void Swap(BCC_serToServ* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BCC_serToServ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BCC_serToServ* New() const final {
    return CreateMaybeMessage<BCC_serToServ>(nullptr);
  }

  BCC_serToServ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BCC_serToServ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BCC_serToServ& from);
  void MergeFrom(const BCC_serToServ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BCC_serToServ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BCC_serToServ";
  }
  protected:
  explicit BCC_serToServ(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BCC_serToServ_CommandTypetoServerToServer CommandTypetoServerToServer;
  static constexpr CommandTypetoServerToServer CMD_LIST =
    BCC_serToServ_CommandTypetoServerToServer_CMD_LIST;
  static constexpr CommandTypetoServerToServer CMD_MSG =
    BCC_serToServ_CommandTypetoServerToServer_CMD_MSG;
  static inline bool CommandTypetoServerToServer_IsValid(int value) {
    return BCC_serToServ_CommandTypetoServerToServer_IsValid(value);
  }
  static constexpr CommandTypetoServerToServer CommandTypetoServerToServer_MIN =
    BCC_serToServ_CommandTypetoServerToServer_CommandTypetoServerToServer_MIN;
  static constexpr CommandTypetoServerToServer CommandTypetoServerToServer_MAX =
    BCC_serToServ_CommandTypetoServerToServer_CommandTypetoServerToServer_MAX;
  static constexpr int CommandTypetoServerToServer_ARRAYSIZE =
    BCC_serToServ_CommandTypetoServerToServer_CommandTypetoServerToServer_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandTypetoServerToServer_descriptor() {
    return BCC_serToServ_CommandTypetoServerToServer_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandTypetoServerToServer_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandTypetoServerToServer>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandTypetoServerToServer_Name.");
    return BCC_serToServ_CommandTypetoServerToServer_Name(enum_t_value);
  }
  static inline bool CommandTypetoServerToServer_Parse(const std::string& name,
      CommandTypetoServerToServer* value) {
    return BCC_serToServ_CommandTypetoServerToServer_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 2,
    kMessageFieldNumber = 3,
    kCommandFieldNumber = 1,
  };
  // repeated .BCC_users users = 2;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::BCC_users* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >*
      mutable_users();
  private:
  const ::BCC_users& _internal_users(int index) const;
  ::BCC_users* _internal_add_users();
  public:
  const ::BCC_users& users(int index) const;
  ::BCC_users* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >&
      users() const;

  // .BCC_formatMessage message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::BCC_formatMessage& message() const;
  ::BCC_formatMessage* release_message();
  ::BCC_formatMessage* mutable_message();
  void set_allocated_message(::BCC_formatMessage* message);
  private:
  const ::BCC_formatMessage& _internal_message() const;
  ::BCC_formatMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::BCC_formatMessage* message);
  ::BCC_formatMessage* unsafe_arena_release_message();

  // .BCC_serToServ.CommandTypetoServerToServer command = 1;
  void clear_command();
  ::BCC_serToServ_CommandTypetoServerToServer command() const;
  void set_command(::BCC_serToServ_CommandTypetoServerToServer value);
  private:
  ::BCC_serToServ_CommandTypetoServerToServer _internal_command() const;
  void _internal_set_command(::BCC_serToServ_CommandTypetoServerToServer value);
  public:

  // @@protoc_insertion_point(class_scope:BCC_serToServ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users > users_;
  ::BCC_formatMessage* message_;
  int command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class BCC_memoriaServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BCC_memoriaServer) */ {
 public:
  inline BCC_memoriaServer() : BCC_memoriaServer(nullptr) {};
  virtual ~BCC_memoriaServer();

  BCC_memoriaServer(const BCC_memoriaServer& from);
  BCC_memoriaServer(BCC_memoriaServer&& from) noexcept
    : BCC_memoriaServer() {
    *this = ::std::move(from);
  }

  inline BCC_memoriaServer& operator=(const BCC_memoriaServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline BCC_memoriaServer& operator=(BCC_memoriaServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BCC_memoriaServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BCC_memoriaServer* internal_default_instance() {
    return reinterpret_cast<const BCC_memoriaServer*>(
               &_BCC_memoriaServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BCC_memoriaServer& a, BCC_memoriaServer& b) {
    a.Swap(&b);
  }
  inline void Swap(BCC_memoriaServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BCC_memoriaServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BCC_memoriaServer* New() const final {
    return CreateMaybeMessage<BCC_memoriaServer>(nullptr);
  }

  BCC_memoriaServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BCC_memoriaServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BCC_memoriaServer& from);
  void MergeFrom(const BCC_memoriaServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BCC_memoriaServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BCC_memoriaServer";
  }
  protected:
  explicit BCC_memoriaServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chat_2eproto);
    return ::descriptor_table_chat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListaFieldNumber = 1,
  };
  // repeated .BCC_users lista = 1;
  int lista_size() const;
  private:
  int _internal_lista_size() const;
  public:
  void clear_lista();
  ::BCC_users* mutable_lista(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >*
      mutable_lista();
  private:
  const ::BCC_users& _internal_lista(int index) const;
  ::BCC_users* _internal_add_lista();
  public:
  const ::BCC_users& lista(int index) const;
  ::BCC_users* add_lista();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >&
      lista() const;

  // @@protoc_insertion_point(class_scope:BCC_memoriaServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users > lista_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BCC_Dist_toServer

// .BCC_Dist_toServer.CommandTypetoServer command = 1;
inline void BCC_Dist_toServer::clear_command() {
  command_ = 0;
}
inline ::BCC_Dist_toServer_CommandTypetoServer BCC_Dist_toServer::_internal_command() const {
  return static_cast< ::BCC_Dist_toServer_CommandTypetoServer >(command_);
}
inline ::BCC_Dist_toServer_CommandTypetoServer BCC_Dist_toServer::command() const {
  // @@protoc_insertion_point(field_get:BCC_Dist_toServer.command)
  return _internal_command();
}
inline void BCC_Dist_toServer::_internal_set_command(::BCC_Dist_toServer_CommandTypetoServer value) {
  
  command_ = value;
}
inline void BCC_Dist_toServer::set_command(::BCC_Dist_toServer_CommandTypetoServer value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:BCC_Dist_toServer.command)
}

// string myname = 2;
inline void BCC_Dist_toServer::clear_myname() {
  myname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BCC_Dist_toServer::myname() const {
  // @@protoc_insertion_point(field_get:BCC_Dist_toServer.myname)
  return _internal_myname();
}
inline void BCC_Dist_toServer::set_myname(const std::string& value) {
  _internal_set_myname(value);
  // @@protoc_insertion_point(field_set:BCC_Dist_toServer.myname)
}
inline std::string* BCC_Dist_toServer::mutable_myname() {
  // @@protoc_insertion_point(field_mutable:BCC_Dist_toServer.myname)
  return _internal_mutable_myname();
}
inline const std::string& BCC_Dist_toServer::_internal_myname() const {
  return myname_.Get();
}
inline void BCC_Dist_toServer::_internal_set_myname(const std::string& value) {
  
  myname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BCC_Dist_toServer::set_myname(std::string&& value) {
  
  myname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BCC_Dist_toServer.myname)
}
inline void BCC_Dist_toServer::set_myname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  myname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BCC_Dist_toServer.myname)
}
inline void BCC_Dist_toServer::set_myname(const char* value,
    size_t size) {
  
  myname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BCC_Dist_toServer.myname)
}
inline std::string* BCC_Dist_toServer::_internal_mutable_myname() {
  
  return myname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BCC_Dist_toServer::release_myname() {
  // @@protoc_insertion_point(field_release:BCC_Dist_toServer.myname)
  return myname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BCC_Dist_toServer::set_allocated_myname(std::string* myname) {
  if (myname != nullptr) {
    
  } else {
    
  }
  myname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), myname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BCC_Dist_toServer.myname)
}
inline std::string* BCC_Dist_toServer::unsafe_arena_release_myname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BCC_Dist_toServer.myname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return myname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BCC_Dist_toServer::unsafe_arena_set_allocated_myname(
    std::string* myname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (myname != nullptr) {
    
  } else {
    
  }
  myname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      myname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BCC_Dist_toServer.myname)
}

// repeated .BCC_users receivers = 3;
inline int BCC_Dist_toServer::_internal_receivers_size() const {
  return receivers_.size();
}
inline int BCC_Dist_toServer::receivers_size() const {
  return _internal_receivers_size();
}
inline void BCC_Dist_toServer::clear_receivers() {
  receivers_.Clear();
}
inline ::BCC_users* BCC_Dist_toServer::mutable_receivers(int index) {
  // @@protoc_insertion_point(field_mutable:BCC_Dist_toServer.receivers)
  return receivers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >*
BCC_Dist_toServer::mutable_receivers() {
  // @@protoc_insertion_point(field_mutable_list:BCC_Dist_toServer.receivers)
  return &receivers_;
}
inline const ::BCC_users& BCC_Dist_toServer::_internal_receivers(int index) const {
  return receivers_.Get(index);
}
inline const ::BCC_users& BCC_Dist_toServer::receivers(int index) const {
  // @@protoc_insertion_point(field_get:BCC_Dist_toServer.receivers)
  return _internal_receivers(index);
}
inline ::BCC_users* BCC_Dist_toServer::_internal_add_receivers() {
  return receivers_.Add();
}
inline ::BCC_users* BCC_Dist_toServer::add_receivers() {
  // @@protoc_insertion_point(field_add:BCC_Dist_toServer.receivers)
  return _internal_add_receivers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >&
BCC_Dist_toServer::receivers() const {
  // @@protoc_insertion_point(field_list:BCC_Dist_toServer.receivers)
  return receivers_;
}

// string message = 4;
inline void BCC_Dist_toServer::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BCC_Dist_toServer::message() const {
  // @@protoc_insertion_point(field_get:BCC_Dist_toServer.message)
  return _internal_message();
}
inline void BCC_Dist_toServer::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:BCC_Dist_toServer.message)
}
inline std::string* BCC_Dist_toServer::mutable_message() {
  // @@protoc_insertion_point(field_mutable:BCC_Dist_toServer.message)
  return _internal_mutable_message();
}
inline const std::string& BCC_Dist_toServer::_internal_message() const {
  return message_.Get();
}
inline void BCC_Dist_toServer::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BCC_Dist_toServer::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BCC_Dist_toServer.message)
}
inline void BCC_Dist_toServer::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BCC_Dist_toServer.message)
}
inline void BCC_Dist_toServer::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BCC_Dist_toServer.message)
}
inline std::string* BCC_Dist_toServer::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BCC_Dist_toServer::release_message() {
  // @@protoc_insertion_point(field_release:BCC_Dist_toServer.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BCC_Dist_toServer::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BCC_Dist_toServer.message)
}
inline std::string* BCC_Dist_toServer::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BCC_Dist_toServer.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BCC_Dist_toServer::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BCC_Dist_toServer.message)
}

// -------------------------------------------------------------------

// BCC_Dist_toClient

// .BCC_Dist_toClient.CommandTypetoClient command = 1;
inline void BCC_Dist_toClient::clear_command() {
  command_ = 0;
}
inline ::BCC_Dist_toClient_CommandTypetoClient BCC_Dist_toClient::_internal_command() const {
  return static_cast< ::BCC_Dist_toClient_CommandTypetoClient >(command_);
}
inline ::BCC_Dist_toClient_CommandTypetoClient BCC_Dist_toClient::command() const {
  // @@protoc_insertion_point(field_get:BCC_Dist_toClient.command)
  return _internal_command();
}
inline void BCC_Dist_toClient::_internal_set_command(::BCC_Dist_toClient_CommandTypetoClient value) {
  
  command_ = value;
}
inline void BCC_Dist_toClient::set_command(::BCC_Dist_toClient_CommandTypetoClient value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:BCC_Dist_toClient.command)
}

// .BCC_formatMessage message = 2;
inline bool BCC_Dist_toClient::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool BCC_Dist_toClient::has_message() const {
  return _internal_has_message();
}
inline void BCC_Dist_toClient::clear_message() {
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::BCC_formatMessage& BCC_Dist_toClient::_internal_message() const {
  const ::BCC_formatMessage* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BCC_formatMessage*>(
      &::_BCC_formatMessage_default_instance_);
}
inline const ::BCC_formatMessage& BCC_Dist_toClient::message() const {
  // @@protoc_insertion_point(field_get:BCC_Dist_toClient.message)
  return _internal_message();
}
inline void BCC_Dist_toClient::unsafe_arena_set_allocated_message(
    ::BCC_formatMessage* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BCC_Dist_toClient.message)
}
inline ::BCC_formatMessage* BCC_Dist_toClient::release_message() {
  auto temp = unsafe_arena_release_message();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BCC_formatMessage* BCC_Dist_toClient::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:BCC_Dist_toClient.message)
  
  ::BCC_formatMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::BCC_formatMessage* BCC_Dist_toClient::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::BCC_formatMessage>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::BCC_formatMessage* BCC_Dist_toClient::mutable_message() {
  // @@protoc_insertion_point(field_mutable:BCC_Dist_toClient.message)
  return _internal_mutable_message();
}
inline void BCC_Dist_toClient::set_allocated_message(::BCC_formatMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:BCC_Dist_toClient.message)
}

// repeated .BCC_users users = 3;
inline int BCC_Dist_toClient::_internal_users_size() const {
  return users_.size();
}
inline int BCC_Dist_toClient::users_size() const {
  return _internal_users_size();
}
inline void BCC_Dist_toClient::clear_users() {
  users_.Clear();
}
inline ::BCC_users* BCC_Dist_toClient::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:BCC_Dist_toClient.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >*
BCC_Dist_toClient::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:BCC_Dist_toClient.users)
  return &users_;
}
inline const ::BCC_users& BCC_Dist_toClient::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::BCC_users& BCC_Dist_toClient::users(int index) const {
  // @@protoc_insertion_point(field_get:BCC_Dist_toClient.users)
  return _internal_users(index);
}
inline ::BCC_users* BCC_Dist_toClient::_internal_add_users() {
  return users_.Add();
}
inline ::BCC_users* BCC_Dist_toClient::add_users() {
  // @@protoc_insertion_point(field_add:BCC_Dist_toClient.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >&
BCC_Dist_toClient::users() const {
  // @@protoc_insertion_point(field_list:BCC_Dist_toClient.users)
  return users_;
}

// string error_message = 4;
inline void BCC_Dist_toClient::clear_error_message() {
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BCC_Dist_toClient::error_message() const {
  // @@protoc_insertion_point(field_get:BCC_Dist_toClient.error_message)
  return _internal_error_message();
}
inline void BCC_Dist_toClient::set_error_message(const std::string& value) {
  _internal_set_error_message(value);
  // @@protoc_insertion_point(field_set:BCC_Dist_toClient.error_message)
}
inline std::string* BCC_Dist_toClient::mutable_error_message() {
  // @@protoc_insertion_point(field_mutable:BCC_Dist_toClient.error_message)
  return _internal_mutable_error_message();
}
inline const std::string& BCC_Dist_toClient::_internal_error_message() const {
  return error_message_.Get();
}
inline void BCC_Dist_toClient::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BCC_Dist_toClient::set_error_message(std::string&& value) {
  
  error_message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BCC_Dist_toClient.error_message)
}
inline void BCC_Dist_toClient::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BCC_Dist_toClient.error_message)
}
inline void BCC_Dist_toClient::set_error_message(const char* value,
    size_t size) {
  
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BCC_Dist_toClient.error_message)
}
inline std::string* BCC_Dist_toClient::_internal_mutable_error_message() {
  
  return error_message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BCC_Dist_toClient::release_error_message() {
  // @@protoc_insertion_point(field_release:BCC_Dist_toClient.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BCC_Dist_toClient::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BCC_Dist_toClient.error_message)
}
inline std::string* BCC_Dist_toClient::unsafe_arena_release_error_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BCC_Dist_toClient.error_message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return error_message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BCC_Dist_toClient::unsafe_arena_set_allocated_error_message(
    std::string* error_message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      error_message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BCC_Dist_toClient.error_message)
}

// -------------------------------------------------------------------

// BCC_users

// string name = 1;
inline void BCC_users::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BCC_users::name() const {
  // @@protoc_insertion_point(field_get:BCC_users.name)
  return _internal_name();
}
inline void BCC_users::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BCC_users.name)
}
inline std::string* BCC_users::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BCC_users.name)
  return _internal_mutable_name();
}
inline const std::string& BCC_users::_internal_name() const {
  return name_.Get();
}
inline void BCC_users::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BCC_users::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BCC_users.name)
}
inline void BCC_users::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BCC_users.name)
}
inline void BCC_users::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BCC_users.name)
}
inline std::string* BCC_users::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BCC_users::release_name() {
  // @@protoc_insertion_point(field_release:BCC_users.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BCC_users::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BCC_users.name)
}
inline std::string* BCC_users::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BCC_users.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BCC_users::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BCC_users.name)
}

// string ip = 2;
inline void BCC_users::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BCC_users::ip() const {
  // @@protoc_insertion_point(field_get:BCC_users.ip)
  return _internal_ip();
}
inline void BCC_users::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:BCC_users.ip)
}
inline std::string* BCC_users::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:BCC_users.ip)
  return _internal_mutable_ip();
}
inline const std::string& BCC_users::_internal_ip() const {
  return ip_.Get();
}
inline void BCC_users::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BCC_users::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BCC_users.ip)
}
inline void BCC_users::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BCC_users.ip)
}
inline void BCC_users::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BCC_users.ip)
}
inline std::string* BCC_users::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BCC_users::release_ip() {
  // @@protoc_insertion_point(field_release:BCC_users.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BCC_users::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BCC_users.ip)
}
inline std::string* BCC_users::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BCC_users.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BCC_users::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BCC_users.ip)
}

// -------------------------------------------------------------------

// BCC_formatMessage

// string receiver = 1;
inline void BCC_formatMessage::clear_receiver() {
  receiver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BCC_formatMessage::receiver() const {
  // @@protoc_insertion_point(field_get:BCC_formatMessage.receiver)
  return _internal_receiver();
}
inline void BCC_formatMessage::set_receiver(const std::string& value) {
  _internal_set_receiver(value);
  // @@protoc_insertion_point(field_set:BCC_formatMessage.receiver)
}
inline std::string* BCC_formatMessage::mutable_receiver() {
  // @@protoc_insertion_point(field_mutable:BCC_formatMessage.receiver)
  return _internal_mutable_receiver();
}
inline const std::string& BCC_formatMessage::_internal_receiver() const {
  return receiver_.Get();
}
inline void BCC_formatMessage::_internal_set_receiver(const std::string& value) {
  
  receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BCC_formatMessage::set_receiver(std::string&& value) {
  
  receiver_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BCC_formatMessage.receiver)
}
inline void BCC_formatMessage::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BCC_formatMessage.receiver)
}
inline void BCC_formatMessage::set_receiver(const char* value,
    size_t size) {
  
  receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BCC_formatMessage.receiver)
}
inline std::string* BCC_formatMessage::_internal_mutable_receiver() {
  
  return receiver_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BCC_formatMessage::release_receiver() {
  // @@protoc_insertion_point(field_release:BCC_formatMessage.receiver)
  return receiver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BCC_formatMessage::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    
  } else {
    
  }
  receiver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BCC_formatMessage.receiver)
}
inline std::string* BCC_formatMessage::unsafe_arena_release_receiver() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BCC_formatMessage.receiver)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return receiver_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BCC_formatMessage::unsafe_arena_set_allocated_receiver(
    std::string* receiver) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (receiver != nullptr) {
    
  } else {
    
  }
  receiver_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      receiver, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BCC_formatMessage.receiver)
}

// string message = 2;
inline void BCC_formatMessage::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BCC_formatMessage::message() const {
  // @@protoc_insertion_point(field_get:BCC_formatMessage.message)
  return _internal_message();
}
inline void BCC_formatMessage::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:BCC_formatMessage.message)
}
inline std::string* BCC_formatMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:BCC_formatMessage.message)
  return _internal_mutable_message();
}
inline const std::string& BCC_formatMessage::_internal_message() const {
  return message_.Get();
}
inline void BCC_formatMessage::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BCC_formatMessage::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BCC_formatMessage.message)
}
inline void BCC_formatMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BCC_formatMessage.message)
}
inline void BCC_formatMessage::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BCC_formatMessage.message)
}
inline std::string* BCC_formatMessage::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BCC_formatMessage::release_message() {
  // @@protoc_insertion_point(field_release:BCC_formatMessage.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BCC_formatMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BCC_formatMessage.message)
}
inline std::string* BCC_formatMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BCC_formatMessage.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BCC_formatMessage::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BCC_formatMessage.message)
}

// string source = 3;
inline void BCC_formatMessage::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BCC_formatMessage::source() const {
  // @@protoc_insertion_point(field_get:BCC_formatMessage.source)
  return _internal_source();
}
inline void BCC_formatMessage::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:BCC_formatMessage.source)
}
inline std::string* BCC_formatMessage::mutable_source() {
  // @@protoc_insertion_point(field_mutable:BCC_formatMessage.source)
  return _internal_mutable_source();
}
inline const std::string& BCC_formatMessage::_internal_source() const {
  return source_.Get();
}
inline void BCC_formatMessage::_internal_set_source(const std::string& value) {
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BCC_formatMessage::set_source(std::string&& value) {
  
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BCC_formatMessage.source)
}
inline void BCC_formatMessage::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:BCC_formatMessage.source)
}
inline void BCC_formatMessage::set_source(const char* value,
    size_t size) {
  
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BCC_formatMessage.source)
}
inline std::string* BCC_formatMessage::_internal_mutable_source() {
  
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BCC_formatMessage::release_source() {
  // @@protoc_insertion_point(field_release:BCC_formatMessage.source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BCC_formatMessage::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BCC_formatMessage.source)
}
inline std::string* BCC_formatMessage::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BCC_formatMessage.source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BCC_formatMessage::unsafe_arena_set_allocated_source(
    std::string* source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source != nullptr) {
    
  } else {
    
  }
  source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BCC_formatMessage.source)
}

// int64 timestamp = 4;
inline void BCC_formatMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BCC_formatMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BCC_formatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:BCC_formatMessage.timestamp)
  return _internal_timestamp();
}
inline void BCC_formatMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void BCC_formatMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:BCC_formatMessage.timestamp)
}

// -------------------------------------------------------------------

// BCC_serToServ

// .BCC_serToServ.CommandTypetoServerToServer command = 1;
inline void BCC_serToServ::clear_command() {
  command_ = 0;
}
inline ::BCC_serToServ_CommandTypetoServerToServer BCC_serToServ::_internal_command() const {
  return static_cast< ::BCC_serToServ_CommandTypetoServerToServer >(command_);
}
inline ::BCC_serToServ_CommandTypetoServerToServer BCC_serToServ::command() const {
  // @@protoc_insertion_point(field_get:BCC_serToServ.command)
  return _internal_command();
}
inline void BCC_serToServ::_internal_set_command(::BCC_serToServ_CommandTypetoServerToServer value) {
  
  command_ = value;
}
inline void BCC_serToServ::set_command(::BCC_serToServ_CommandTypetoServerToServer value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:BCC_serToServ.command)
}

// repeated .BCC_users users = 2;
inline int BCC_serToServ::_internal_users_size() const {
  return users_.size();
}
inline int BCC_serToServ::users_size() const {
  return _internal_users_size();
}
inline void BCC_serToServ::clear_users() {
  users_.Clear();
}
inline ::BCC_users* BCC_serToServ::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:BCC_serToServ.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >*
BCC_serToServ::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:BCC_serToServ.users)
  return &users_;
}
inline const ::BCC_users& BCC_serToServ::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::BCC_users& BCC_serToServ::users(int index) const {
  // @@protoc_insertion_point(field_get:BCC_serToServ.users)
  return _internal_users(index);
}
inline ::BCC_users* BCC_serToServ::_internal_add_users() {
  return users_.Add();
}
inline ::BCC_users* BCC_serToServ::add_users() {
  // @@protoc_insertion_point(field_add:BCC_serToServ.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >&
BCC_serToServ::users() const {
  // @@protoc_insertion_point(field_list:BCC_serToServ.users)
  return users_;
}

// .BCC_formatMessage message = 3;
inline bool BCC_serToServ::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool BCC_serToServ::has_message() const {
  return _internal_has_message();
}
inline void BCC_serToServ::clear_message() {
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::BCC_formatMessage& BCC_serToServ::_internal_message() const {
  const ::BCC_formatMessage* p = message_;
  return p != nullptr ? *p : *reinterpret_cast<const ::BCC_formatMessage*>(
      &::_BCC_formatMessage_default_instance_);
}
inline const ::BCC_formatMessage& BCC_serToServ::message() const {
  // @@protoc_insertion_point(field_get:BCC_serToServ.message)
  return _internal_message();
}
inline void BCC_serToServ::unsafe_arena_set_allocated_message(
    ::BCC_formatMessage* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BCC_serToServ.message)
}
inline ::BCC_formatMessage* BCC_serToServ::release_message() {
  auto temp = unsafe_arena_release_message();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BCC_formatMessage* BCC_serToServ::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:BCC_serToServ.message)
  
  ::BCC_formatMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::BCC_formatMessage* BCC_serToServ::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::BCC_formatMessage>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::BCC_formatMessage* BCC_serToServ::mutable_message() {
  // @@protoc_insertion_point(field_mutable:BCC_serToServ.message)
  return _internal_mutable_message();
}
inline void BCC_serToServ::set_allocated_message(::BCC_formatMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:BCC_serToServ.message)
}

// -------------------------------------------------------------------

// BCC_memoriaServer

// repeated .BCC_users lista = 1;
inline int BCC_memoriaServer::_internal_lista_size() const {
  return lista_.size();
}
inline int BCC_memoriaServer::lista_size() const {
  return _internal_lista_size();
}
inline void BCC_memoriaServer::clear_lista() {
  lista_.Clear();
}
inline ::BCC_users* BCC_memoriaServer::mutable_lista(int index) {
  // @@protoc_insertion_point(field_mutable:BCC_memoriaServer.lista)
  return lista_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >*
BCC_memoriaServer::mutable_lista() {
  // @@protoc_insertion_point(field_mutable_list:BCC_memoriaServer.lista)
  return &lista_;
}
inline const ::BCC_users& BCC_memoriaServer::_internal_lista(int index) const {
  return lista_.Get(index);
}
inline const ::BCC_users& BCC_memoriaServer::lista(int index) const {
  // @@protoc_insertion_point(field_get:BCC_memoriaServer.lista)
  return _internal_lista(index);
}
inline ::BCC_users* BCC_memoriaServer::_internal_add_lista() {
  return lista_.Add();
}
inline ::BCC_users* BCC_memoriaServer::add_lista() {
  // @@protoc_insertion_point(field_add:BCC_memoriaServer.lista)
  return _internal_add_lista();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BCC_users >&
BCC_memoriaServer::lista() const {
  // @@protoc_insertion_point(field_list:BCC_memoriaServer.lista)
  return lista_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BCC_Dist_toServer_CommandTypetoServer> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BCC_Dist_toServer_CommandTypetoServer>() {
  return ::BCC_Dist_toServer_CommandTypetoServer_descriptor();
}
template <> struct is_proto_enum< ::BCC_Dist_toClient_CommandTypetoClient> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BCC_Dist_toClient_CommandTypetoClient>() {
  return ::BCC_Dist_toClient_CommandTypetoClient_descriptor();
}
template <> struct is_proto_enum< ::BCC_serToServ_CommandTypetoServerToServer> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BCC_serToServ_CommandTypetoServerToServer>() {
  return ::BCC_serToServ_CommandTypetoServerToServer_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
