// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BCC_formatMessage_chat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BCC_users_chat_2eproto;
class BCC_Dist_toServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BCC_Dist_toServer> _instance;
} _BCC_Dist_toServer_default_instance_;
class BCC_Dist_toClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BCC_Dist_toClient> _instance;
} _BCC_Dist_toClient_default_instance_;
class BCC_usersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BCC_users> _instance;
} _BCC_users_default_instance_;
class BCC_formatMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BCC_formatMessage> _instance;
} _BCC_formatMessage_default_instance_;
class BCC_serToServDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BCC_serToServ> _instance;
} _BCC_serToServ_default_instance_;
class BCC_memoriaServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BCC_memoriaServer> _instance;
} _BCC_memoriaServer_default_instance_;
static void InitDefaultsscc_info_BCC_Dist_toClient_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BCC_Dist_toClient_default_instance_;
    new (ptr) ::BCC_Dist_toClient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BCC_Dist_toClient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BCC_Dist_toClient_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BCC_Dist_toClient_chat_2eproto}, {
      &scc_info_BCC_formatMessage_chat_2eproto.base,
      &scc_info_BCC_users_chat_2eproto.base,}};

static void InitDefaultsscc_info_BCC_Dist_toServer_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BCC_Dist_toServer_default_instance_;
    new (ptr) ::BCC_Dist_toServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BCC_Dist_toServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BCC_Dist_toServer_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BCC_Dist_toServer_chat_2eproto}, {
      &scc_info_BCC_users_chat_2eproto.base,}};

static void InitDefaultsscc_info_BCC_formatMessage_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BCC_formatMessage_default_instance_;
    new (ptr) ::BCC_formatMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BCC_formatMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BCC_formatMessage_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BCC_formatMessage_chat_2eproto}, {}};

static void InitDefaultsscc_info_BCC_memoriaServer_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BCC_memoriaServer_default_instance_;
    new (ptr) ::BCC_memoriaServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BCC_memoriaServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BCC_memoriaServer_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BCC_memoriaServer_chat_2eproto}, {
      &scc_info_BCC_users_chat_2eproto.base,}};

static void InitDefaultsscc_info_BCC_serToServ_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BCC_serToServ_default_instance_;
    new (ptr) ::BCC_serToServ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BCC_serToServ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BCC_serToServ_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BCC_serToServ_chat_2eproto}, {
      &scc_info_BCC_users_chat_2eproto.base,
      &scc_info_BCC_formatMessage_chat_2eproto.base,}};

static void InitDefaultsscc_info_BCC_users_chat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BCC_users_default_instance_;
    new (ptr) ::BCC_users();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BCC_users::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BCC_users_chat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BCC_users_chat_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_chat_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_chat_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_chat_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_chat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BCC_Dist_toServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BCC_Dist_toServer, command_),
  PROTOBUF_FIELD_OFFSET(::BCC_Dist_toServer, myname_),
  PROTOBUF_FIELD_OFFSET(::BCC_Dist_toServer, receivers_),
  PROTOBUF_FIELD_OFFSET(::BCC_Dist_toServer, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BCC_Dist_toClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BCC_Dist_toClient, command_),
  PROTOBUF_FIELD_OFFSET(::BCC_Dist_toClient, message_),
  PROTOBUF_FIELD_OFFSET(::BCC_Dist_toClient, users_),
  PROTOBUF_FIELD_OFFSET(::BCC_Dist_toClient, error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BCC_users, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BCC_users, name_),
  PROTOBUF_FIELD_OFFSET(::BCC_users, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BCC_formatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BCC_formatMessage, receiver_),
  PROTOBUF_FIELD_OFFSET(::BCC_formatMessage, message_),
  PROTOBUF_FIELD_OFFSET(::BCC_formatMessage, source_),
  PROTOBUF_FIELD_OFFSET(::BCC_formatMessage, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BCC_serToServ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BCC_serToServ, command_),
  PROTOBUF_FIELD_OFFSET(::BCC_serToServ, users_),
  PROTOBUF_FIELD_OFFSET(::BCC_serToServ, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BCC_memoriaServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BCC_memoriaServer, lista_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::BCC_Dist_toServer)},
  { 9, -1, sizeof(::BCC_Dist_toClient)},
  { 18, -1, sizeof(::BCC_users)},
  { 25, -1, sizeof(::BCC_formatMessage)},
  { 34, -1, sizeof(::BCC_serToServ)},
  { 42, -1, sizeof(::BCC_memoriaServer)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BCC_Dist_toServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BCC_Dist_toClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BCC_users_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BCC_formatMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BCC_serToServ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BCC_memoriaServer_default_instance_),
};

const char descriptor_table_protodef_chat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nchat.proto\"\375\001\n\021BCC_Dist_toServer\0227\n\007co"
  "mmand\030\001 \001(\0162&.BCC_Dist_toServer.CommandT"
  "ypetoServer\022\016\n\006myname\030\002 \001(\t\022\035\n\treceivers"
  "\030\003 \003(\0132\n.BCC_users\022\017\n\007message\030\004 \001(\t\"o\n\023C"
  "ommandTypetoServer\022\n\n\006CMD_ID\020\000\022\014\n\010CMD_LI"
  "ST\020\001\022\017\n\013CMD_SENDALL\020\002\022\017\n\013CMD_SENDONE\020\003\022\020"
  "\n\014CMD_SENDLIST\020\004\022\n\n\006CMD_DC\020\005\"\344\001\n\021BCC_Dis"
  "t_toClient\0227\n\007command\030\001 \001(\0162&.BCC_Dist_t"
  "oClient.CommandTypetoClient\022#\n\007message\030\002"
  " \001(\0132\022.BCC_formatMessage\022\031\n\005users\030\003 \003(\0132"
  "\n.BCC_users\022\025\n\rerror_message\030\004 \001(\t\"\?\n\023Co"
  "mmandTypetoClient\022\014\n\010CMD_LIST\020\000\022\013\n\007CMD_M"
  "SG\020\001\022\r\n\tCMD_ERROR\020\002\"%\n\tBCC_users\022\014\n\004name"
  "\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\"Y\n\021BCC_formatMessage\022"
  "\020\n\010receiver\030\001 \001(\t\022\017\n\007message\030\002 \001(\t\022\016\n\006so"
  "urce\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\003\"\306\001\n\rBCC_se"
  "rToServ\022;\n\007command\030\001 \001(\0162*.BCC_serToServ"
  ".CommandTypetoServerToServer\022\031\n\005users\030\002 "
  "\003(\0132\n.BCC_users\022#\n\007message\030\003 \001(\0132\022.BCC_f"
  "ormatMessage\"8\n\033CommandTypetoServerToSer"
  "ver\022\014\n\010CMD_LIST\020\000\022\013\n\007CMD_MSG\020\001\".\n\021BCC_me"
  "moriaServer\022\031\n\005lista\030\001 \003(\0132\n.BCC_usersb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_chat_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_chat_2eproto_sccs[6] = {
  &scc_info_BCC_Dist_toClient_chat_2eproto.base,
  &scc_info_BCC_Dist_toServer_chat_2eproto.base,
  &scc_info_BCC_formatMessage_chat_2eproto.base,
  &scc_info_BCC_memoriaServer_chat_2eproto.base,
  &scc_info_BCC_serToServ_chat_2eproto.base,
  &scc_info_BCC_users_chat_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_chat_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto = {
  false, false, descriptor_table_protodef_chat_2eproto, "chat.proto", 886,
  &descriptor_table_chat_2eproto_once, descriptor_table_chat_2eproto_sccs, descriptor_table_chat_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_chat_2eproto::offsets,
  file_level_metadata_chat_2eproto, 6, file_level_enum_descriptors_chat_2eproto, file_level_service_descriptors_chat_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_chat_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_chat_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BCC_Dist_toServer_CommandTypetoServer_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[0];
}
bool BCC_Dist_toServer_CommandTypetoServer_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BCC_Dist_toServer_CommandTypetoServer BCC_Dist_toServer::CMD_ID;
constexpr BCC_Dist_toServer_CommandTypetoServer BCC_Dist_toServer::CMD_LIST;
constexpr BCC_Dist_toServer_CommandTypetoServer BCC_Dist_toServer::CMD_SENDALL;
constexpr BCC_Dist_toServer_CommandTypetoServer BCC_Dist_toServer::CMD_SENDONE;
constexpr BCC_Dist_toServer_CommandTypetoServer BCC_Dist_toServer::CMD_SENDLIST;
constexpr BCC_Dist_toServer_CommandTypetoServer BCC_Dist_toServer::CMD_DC;
constexpr BCC_Dist_toServer_CommandTypetoServer BCC_Dist_toServer::CommandTypetoServer_MIN;
constexpr BCC_Dist_toServer_CommandTypetoServer BCC_Dist_toServer::CommandTypetoServer_MAX;
constexpr int BCC_Dist_toServer::CommandTypetoServer_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BCC_Dist_toClient_CommandTypetoClient_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[1];
}
bool BCC_Dist_toClient_CommandTypetoClient_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BCC_Dist_toClient_CommandTypetoClient BCC_Dist_toClient::CMD_LIST;
constexpr BCC_Dist_toClient_CommandTypetoClient BCC_Dist_toClient::CMD_MSG;
constexpr BCC_Dist_toClient_CommandTypetoClient BCC_Dist_toClient::CMD_ERROR;
constexpr BCC_Dist_toClient_CommandTypetoClient BCC_Dist_toClient::CommandTypetoClient_MIN;
constexpr BCC_Dist_toClient_CommandTypetoClient BCC_Dist_toClient::CommandTypetoClient_MAX;
constexpr int BCC_Dist_toClient::CommandTypetoClient_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BCC_serToServ_CommandTypetoServerToServer_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[2];
}
bool BCC_serToServ_CommandTypetoServerToServer_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BCC_serToServ_CommandTypetoServerToServer BCC_serToServ::CMD_LIST;
constexpr BCC_serToServ_CommandTypetoServerToServer BCC_serToServ::CMD_MSG;
constexpr BCC_serToServ_CommandTypetoServerToServer BCC_serToServ::CommandTypetoServerToServer_MIN;
constexpr BCC_serToServ_CommandTypetoServerToServer BCC_serToServ::CommandTypetoServerToServer_MAX;
constexpr int BCC_serToServ::CommandTypetoServerToServer_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void BCC_Dist_toServer::InitAsDefaultInstance() {
}
class BCC_Dist_toServer::_Internal {
 public:
};

BCC_Dist_toServer::BCC_Dist_toServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  receivers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BCC_Dist_toServer)
}
BCC_Dist_toServer::BCC_Dist_toServer(const BCC_Dist_toServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      receivers_(from.receivers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  myname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_myname().empty()) {
    myname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_myname(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:BCC_Dist_toServer)
}

void BCC_Dist_toServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BCC_Dist_toServer_chat_2eproto.base);
  myname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_ = 0;
}

BCC_Dist_toServer::~BCC_Dist_toServer() {
  // @@protoc_insertion_point(destructor:BCC_Dist_toServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BCC_Dist_toServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  myname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BCC_Dist_toServer::ArenaDtor(void* object) {
  BCC_Dist_toServer* _this = reinterpret_cast< BCC_Dist_toServer* >(object);
  (void)_this;
}
void BCC_Dist_toServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BCC_Dist_toServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BCC_Dist_toServer& BCC_Dist_toServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BCC_Dist_toServer_chat_2eproto.base);
  return *internal_default_instance();
}


void BCC_Dist_toServer::Clear() {
// @@protoc_insertion_point(message_clear_start:BCC_Dist_toServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receivers_.Clear();
  myname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  command_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BCC_Dist_toServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BCC_Dist_toServer.CommandTypetoServer command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::BCC_Dist_toServer_CommandTypetoServer>(val));
        } else goto handle_unusual;
        continue;
      // string myname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_myname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BCC_Dist_toServer.myname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BCC_users receivers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_receivers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BCC_Dist_toServer.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BCC_Dist_toServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BCC_Dist_toServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BCC_Dist_toServer.CommandTypetoServer command = 1;
  if (this->command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  // string myname = 2;
  if (this->myname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_myname().data(), static_cast<int>(this->_internal_myname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BCC_Dist_toServer.myname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_myname(), target);
  }

  // repeated .BCC_users receivers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_receivers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_receivers(i), target, stream);
  }

  // string message = 4;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BCC_Dist_toServer.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BCC_Dist_toServer)
  return target;
}

size_t BCC_Dist_toServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BCC_Dist_toServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BCC_users receivers = 3;
  total_size += 1UL * this->_internal_receivers_size();
  for (const auto& msg : this->receivers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string myname = 2;
  if (this->myname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_myname());
  }

  // string message = 4;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .BCC_Dist_toServer.CommandTypetoServer command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BCC_Dist_toServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BCC_Dist_toServer)
  GOOGLE_DCHECK_NE(&from, this);
  const BCC_Dist_toServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BCC_Dist_toServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BCC_Dist_toServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BCC_Dist_toServer)
    MergeFrom(*source);
  }
}

void BCC_Dist_toServer::MergeFrom(const BCC_Dist_toServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BCC_Dist_toServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  receivers_.MergeFrom(from.receivers_);
  if (from.myname().size() > 0) {
    _internal_set_myname(from._internal_myname());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.command() != 0) {
    _internal_set_command(from._internal_command());
  }
}

void BCC_Dist_toServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BCC_Dist_toServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCC_Dist_toServer::CopyFrom(const BCC_Dist_toServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BCC_Dist_toServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCC_Dist_toServer::IsInitialized() const {
  return true;
}

void BCC_Dist_toServer::InternalSwap(BCC_Dist_toServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  receivers_.InternalSwap(&other->receivers_);
  myname_.Swap(&other->myname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BCC_Dist_toServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BCC_Dist_toClient::InitAsDefaultInstance() {
  ::_BCC_Dist_toClient_default_instance_._instance.get_mutable()->message_ = const_cast< ::BCC_formatMessage*>(
      ::BCC_formatMessage::internal_default_instance());
}
class BCC_Dist_toClient::_Internal {
 public:
  static const ::BCC_formatMessage& message(const BCC_Dist_toClient* msg);
};

const ::BCC_formatMessage&
BCC_Dist_toClient::_Internal::message(const BCC_Dist_toClient* msg) {
  return *msg->message_;
}
BCC_Dist_toClient::BCC_Dist_toClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  users_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BCC_Dist_toClient)
}
BCC_Dist_toClient::BCC_Dist_toClient(const BCC_Dist_toClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error_message(),
      GetArena());
  }
  if (from._internal_has_message()) {
    message_ = new ::BCC_formatMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:BCC_Dist_toClient)
}

void BCC_Dist_toClient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BCC_Dist_toClient_chat_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&message_)) + sizeof(command_));
}

BCC_Dist_toClient::~BCC_Dist_toClient() {
  // @@protoc_insertion_point(destructor:BCC_Dist_toClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BCC_Dist_toClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_;
}

void BCC_Dist_toClient::ArenaDtor(void* object) {
  BCC_Dist_toClient* _this = reinterpret_cast< BCC_Dist_toClient* >(object);
  (void)_this;
}
void BCC_Dist_toClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BCC_Dist_toClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BCC_Dist_toClient& BCC_Dist_toClient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BCC_Dist_toClient_chat_2eproto.base);
  return *internal_default_instance();
}


void BCC_Dist_toClient::Clear() {
// @@protoc_insertion_point(message_clear_start:BCC_Dist_toClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  command_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BCC_Dist_toClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BCC_Dist_toClient.CommandTypetoClient command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::BCC_Dist_toClient_CommandTypetoClient>(val));
        } else goto handle_unusual;
        continue;
      // .BCC_formatMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .BCC_users users = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BCC_Dist_toClient.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BCC_Dist_toClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BCC_Dist_toClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BCC_Dist_toClient.CommandTypetoClient command = 1;
  if (this->command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  // .BCC_formatMessage message = 2;
  if (this->has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message(this), target, stream);
  }

  // repeated .BCC_users users = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_users(i), target, stream);
  }

  // string error_message = 4;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BCC_Dist_toClient.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BCC_Dist_toClient)
  return target;
}

size_t BCC_Dist_toClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BCC_Dist_toClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BCC_users users = 3;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_message = 4;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .BCC_formatMessage message = 2;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  // .BCC_Dist_toClient.CommandTypetoClient command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BCC_Dist_toClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BCC_Dist_toClient)
  GOOGLE_DCHECK_NE(&from, this);
  const BCC_Dist_toClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BCC_Dist_toClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BCC_Dist_toClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BCC_Dist_toClient)
    MergeFrom(*source);
  }
}

void BCC_Dist_toClient::MergeFrom(const BCC_Dist_toClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BCC_Dist_toClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from.error_message().size() > 0) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from.has_message()) {
    _internal_mutable_message()->::BCC_formatMessage::MergeFrom(from._internal_message());
  }
  if (from.command() != 0) {
    _internal_set_command(from._internal_command());
  }
}

void BCC_Dist_toClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BCC_Dist_toClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCC_Dist_toClient::CopyFrom(const BCC_Dist_toClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BCC_Dist_toClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCC_Dist_toClient::IsInitialized() const {
  return true;
}

void BCC_Dist_toClient::InternalSwap(BCC_Dist_toClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BCC_Dist_toClient, command_)
      + sizeof(BCC_Dist_toClient::command_)
      - PROTOBUF_FIELD_OFFSET(BCC_Dist_toClient, message_)>(
          reinterpret_cast<char*>(&message_),
          reinterpret_cast<char*>(&other->message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BCC_Dist_toClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BCC_users::InitAsDefaultInstance() {
}
class BCC_users::_Internal {
 public:
};

BCC_users::BCC_users(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BCC_users)
}
BCC_users::BCC_users(const BCC_users& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:BCC_users)
}

void BCC_users::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BCC_users_chat_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BCC_users::~BCC_users() {
  // @@protoc_insertion_point(destructor:BCC_users)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BCC_users::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BCC_users::ArenaDtor(void* object) {
  BCC_users* _this = reinterpret_cast< BCC_users* >(object);
  (void)_this;
}
void BCC_users::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BCC_users::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BCC_users& BCC_users::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BCC_users_chat_2eproto.base);
  return *internal_default_instance();
}


void BCC_users::Clear() {
// @@protoc_insertion_point(message_clear_start:BCC_users)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BCC_users::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BCC_users.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BCC_users.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BCC_users::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BCC_users)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BCC_users.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BCC_users.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BCC_users)
  return target;
}

size_t BCC_users::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BCC_users)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BCC_users::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BCC_users)
  GOOGLE_DCHECK_NE(&from, this);
  const BCC_users* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BCC_users>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BCC_users)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BCC_users)
    MergeFrom(*source);
  }
}

void BCC_users::MergeFrom(const BCC_users& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BCC_users)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
}

void BCC_users::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BCC_users)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCC_users::CopyFrom(const BCC_users& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BCC_users)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCC_users::IsInitialized() const {
  return true;
}

void BCC_users::InternalSwap(BCC_users* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BCC_users::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BCC_formatMessage::InitAsDefaultInstance() {
}
class BCC_formatMessage::_Internal {
 public:
};

BCC_formatMessage::BCC_formatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BCC_formatMessage)
}
BCC_formatMessage::BCC_formatMessage(const BCC_formatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_receiver().empty()) {
    receiver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_receiver(),
      GetArena());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source(),
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:BCC_formatMessage)
}

void BCC_formatMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BCC_formatMessage_chat_2eproto.base);
  receiver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
}

BCC_formatMessage::~BCC_formatMessage() {
  // @@protoc_insertion_point(destructor:BCC_formatMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BCC_formatMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  receiver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BCC_formatMessage::ArenaDtor(void* object) {
  BCC_formatMessage* _this = reinterpret_cast< BCC_formatMessage* >(object);
  (void)_this;
}
void BCC_formatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BCC_formatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BCC_formatMessage& BCC_formatMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BCC_formatMessage_chat_2eproto.base);
  return *internal_default_instance();
}


void BCC_formatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:BCC_formatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  receiver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BCC_formatMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string receiver = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_receiver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BCC_formatMessage.receiver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BCC_formatMessage.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BCC_formatMessage.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BCC_formatMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BCC_formatMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string receiver = 1;
  if (this->receiver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_receiver().data(), static_cast<int>(this->_internal_receiver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BCC_formatMessage.receiver");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_receiver(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BCC_formatMessage.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string source = 3;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BCC_formatMessage.source");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source(), target);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BCC_formatMessage)
  return target;
}

size_t BCC_formatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BCC_formatMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string receiver = 1;
  if (this->receiver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_receiver());
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string source = 3;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BCC_formatMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BCC_formatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BCC_formatMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BCC_formatMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BCC_formatMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BCC_formatMessage)
    MergeFrom(*source);
  }
}

void BCC_formatMessage::MergeFrom(const BCC_formatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BCC_formatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.receiver().size() > 0) {
    _internal_set_receiver(from._internal_receiver());
  }
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.source().size() > 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void BCC_formatMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BCC_formatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCC_formatMessage::CopyFrom(const BCC_formatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BCC_formatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCC_formatMessage::IsInitialized() const {
  return true;
}

void BCC_formatMessage::InternalSwap(BCC_formatMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  receiver_.Swap(&other->receiver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BCC_formatMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BCC_serToServ::InitAsDefaultInstance() {
  ::_BCC_serToServ_default_instance_._instance.get_mutable()->message_ = const_cast< ::BCC_formatMessage*>(
      ::BCC_formatMessage::internal_default_instance());
}
class BCC_serToServ::_Internal {
 public:
  static const ::BCC_formatMessage& message(const BCC_serToServ* msg);
};

const ::BCC_formatMessage&
BCC_serToServ::_Internal::message(const BCC_serToServ* msg) {
  return *msg->message_;
}
BCC_serToServ::BCC_serToServ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  users_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BCC_serToServ)
}
BCC_serToServ::BCC_serToServ(const BCC_serToServ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_message()) {
    message_ = new ::BCC_formatMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:BCC_serToServ)
}

void BCC_serToServ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BCC_serToServ_chat_2eproto.base);
  ::memset(&message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&message_)) + sizeof(command_));
}

BCC_serToServ::~BCC_serToServ() {
  // @@protoc_insertion_point(destructor:BCC_serToServ)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BCC_serToServ::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete message_;
}

void BCC_serToServ::ArenaDtor(void* object) {
  BCC_serToServ* _this = reinterpret_cast< BCC_serToServ* >(object);
  (void)_this;
}
void BCC_serToServ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BCC_serToServ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BCC_serToServ& BCC_serToServ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BCC_serToServ_chat_2eproto.base);
  return *internal_default_instance();
}


void BCC_serToServ::Clear() {
// @@protoc_insertion_point(message_clear_start:BCC_serToServ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  command_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BCC_serToServ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BCC_serToServ.CommandTypetoServerToServer command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::BCC_serToServ_CommandTypetoServerToServer>(val));
        } else goto handle_unusual;
        continue;
      // repeated .BCC_users users = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .BCC_formatMessage message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BCC_serToServ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BCC_serToServ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BCC_serToServ.CommandTypetoServerToServer command = 1;
  if (this->command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  // repeated .BCC_users users = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_users(i), target, stream);
  }

  // .BCC_formatMessage message = 3;
  if (this->has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BCC_serToServ)
  return target;
}

size_t BCC_serToServ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BCC_serToServ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BCC_users users = 2;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .BCC_formatMessage message = 3;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  // .BCC_serToServ.CommandTypetoServerToServer command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BCC_serToServ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BCC_serToServ)
  GOOGLE_DCHECK_NE(&from, this);
  const BCC_serToServ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BCC_serToServ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BCC_serToServ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BCC_serToServ)
    MergeFrom(*source);
  }
}

void BCC_serToServ::MergeFrom(const BCC_serToServ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BCC_serToServ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from.has_message()) {
    _internal_mutable_message()->::BCC_formatMessage::MergeFrom(from._internal_message());
  }
  if (from.command() != 0) {
    _internal_set_command(from._internal_command());
  }
}

void BCC_serToServ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BCC_serToServ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCC_serToServ::CopyFrom(const BCC_serToServ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BCC_serToServ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCC_serToServ::IsInitialized() const {
  return true;
}

void BCC_serToServ::InternalSwap(BCC_serToServ* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BCC_serToServ, command_)
      + sizeof(BCC_serToServ::command_)
      - PROTOBUF_FIELD_OFFSET(BCC_serToServ, message_)>(
          reinterpret_cast<char*>(&message_),
          reinterpret_cast<char*>(&other->message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BCC_serToServ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BCC_memoriaServer::InitAsDefaultInstance() {
}
class BCC_memoriaServer::_Internal {
 public:
};

BCC_memoriaServer::BCC_memoriaServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lista_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BCC_memoriaServer)
}
BCC_memoriaServer::BCC_memoriaServer(const BCC_memoriaServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lista_(from.lista_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BCC_memoriaServer)
}

void BCC_memoriaServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BCC_memoriaServer_chat_2eproto.base);
}

BCC_memoriaServer::~BCC_memoriaServer() {
  // @@protoc_insertion_point(destructor:BCC_memoriaServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BCC_memoriaServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BCC_memoriaServer::ArenaDtor(void* object) {
  BCC_memoriaServer* _this = reinterpret_cast< BCC_memoriaServer* >(object);
  (void)_this;
}
void BCC_memoriaServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BCC_memoriaServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BCC_memoriaServer& BCC_memoriaServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BCC_memoriaServer_chat_2eproto.base);
  return *internal_default_instance();
}


void BCC_memoriaServer::Clear() {
// @@protoc_insertion_point(message_clear_start:BCC_memoriaServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lista_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BCC_memoriaServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BCC_users lista = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lista(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BCC_memoriaServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BCC_memoriaServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BCC_users lista = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lista_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lista(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BCC_memoriaServer)
  return target;
}

size_t BCC_memoriaServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BCC_memoriaServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BCC_users lista = 1;
  total_size += 1UL * this->_internal_lista_size();
  for (const auto& msg : this->lista_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BCC_memoriaServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BCC_memoriaServer)
  GOOGLE_DCHECK_NE(&from, this);
  const BCC_memoriaServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BCC_memoriaServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BCC_memoriaServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BCC_memoriaServer)
    MergeFrom(*source);
  }
}

void BCC_memoriaServer::MergeFrom(const BCC_memoriaServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BCC_memoriaServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lista_.MergeFrom(from.lista_);
}

void BCC_memoriaServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BCC_memoriaServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BCC_memoriaServer::CopyFrom(const BCC_memoriaServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BCC_memoriaServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BCC_memoriaServer::IsInitialized() const {
  return true;
}

void BCC_memoriaServer::InternalSwap(BCC_memoriaServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lista_.InternalSwap(&other->lista_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BCC_memoriaServer::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BCC_Dist_toServer* Arena::CreateMaybeMessage< ::BCC_Dist_toServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BCC_Dist_toServer >(arena);
}
template<> PROTOBUF_NOINLINE ::BCC_Dist_toClient* Arena::CreateMaybeMessage< ::BCC_Dist_toClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BCC_Dist_toClient >(arena);
}
template<> PROTOBUF_NOINLINE ::BCC_users* Arena::CreateMaybeMessage< ::BCC_users >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BCC_users >(arena);
}
template<> PROTOBUF_NOINLINE ::BCC_formatMessage* Arena::CreateMaybeMessage< ::BCC_formatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BCC_formatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::BCC_serToServ* Arena::CreateMaybeMessage< ::BCC_serToServ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BCC_serToServ >(arena);
}
template<> PROTOBUF_NOINLINE ::BCC_memoriaServer* Arena::CreateMaybeMessage< ::BCC_memoriaServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BCC_memoriaServer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
